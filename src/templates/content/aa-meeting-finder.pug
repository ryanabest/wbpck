include ../mixins/mixins

.project-content#project-content-intro
  h1 !{project.title}
  p This visualization maps Alcoholics Anonymous meetings in Manhattan happening within a certain distance and timeframe from your current&nbsp;location.
.project-image
  +vimeo(311095623)

//- PROCESS -//
.project-content
  h1 Process
  p
    strong Audience: 
    | Parsons Data Structures Course
  p
    strong Data Source: 
    | Alcoholics Anonymous of New York webpages (<a class='underline' href='https://github.com/ryanabest/data-structures/tree/master/Data/raw'>static copies</a> of <a class='underline' href='https://parsons.nyc/aa/m01.html'>outdated meeting list pages</a>, saved and published specifically for Parsons course)
  p
    strong Tools: 
    | Async / AWS RDS / Cheerio / CSS / EC2 / Express / Handlebars / HTML / JavaScript / Leaflet / Node / PostgreSQL / Web Scraping
  p
    a.see-link.underline(href="https://github.com/ryanabest/data-structures/tree/master/final") See the code →

//- DATA -//
.project-content
  h1 Data
  .swiper-container
    .swiper-wrapper
      +swiper_slide(require(`../images/${utils.slugify(project.eyebrow)}/${project.id}/data/data1.png`), "I started with <a class='underline' href='https://parsons.nyc/aa/m01.html'>static versions</a> of old New York AA Meeting List Agenda webpages saved by our professor and re-published for&nbsp;our&nbsp;course")
      +swiper_slide(require(`../images/${utils.slugify(project.eyebrow)}/${project.id}/data/data2.gif`), "I then used the web inspector to find any organizational structures and patterns in the code within these messy, outdated&nbsp;pages...")
      +swiper_slide(require(`../images/${utils.slugify(project.eyebrow)}/${project.id}/data/data3.gif`), "...and used node to pull down the <a class='underline' href='https://github.com/ryanabest/data-structures/tree/master/Data/raw'>raw HTML</a> for each page and <a class='underline' href='https://github.com/ryanabest/data-structures/blob/master/week2/week2.js'>parse</a> location and event data from these files into workable JSON formats")
      +swiper_slide(require(`../images/${utils.slugify(project.eyebrow)}/${project.id}/data/data4.gif`), "I used Google's <a class='underline' href='https://developers.google.com/maps/documentation/geocoding/start'>Geocoding API</a> to find the the latitude / longitude for each location identified across all 10 raw data files, along with a cleanly formatted address")
      +swiper_slide(require(`../images/${utils.slugify(project.eyebrow)}/${project.id}/data/data5.png`), "Finally, I combined location, event, and meeting schedule data with the geographic data results from the Google to populate a custom data schema I designed for this project")
    .swiper-pagination
    .swiper-button-prev
    .swiper-button-next
  h2 Data Querying
  p
    | The <a class='underline' href='https://github.com/ryanabest/data-structures/blob/master/final/routes/aa.js'>data query</a> for my front-end interface pulls geolocation, location, meeting, and schedule data from my <a class='underline' href='https://github.com/ryanabest/data-structures/blob/master/week4/data-structures_week4.md'>PostgreSQL data structure</a> for any meeting within a certain amount of hours from now and a certain distance from a specific location (defaulted to Parsons).
    | These mile and distance values are passed into the query itself, ensuring we're querying the minimum amount of data needed to display only relevant meetings and locations.
  p The query returns one row per geolocation that matches our location constraint with a nested structure containing information about each location within a geolocation, each meeting within that location, and the schedule within each meeting that matches our time constraint:
  img(src=require(`../images/${utils.slugify(project.eyebrow)}/${project.id}/data/data6.png`))

//- VISUALIZATION -//
.project-content
  h1 Visualization
.project-image
  img(src=require(`../images/${utils.slugify(project.eyebrow)}/${project.id}.png`))
.project-content
    p Our main visualization is a dark map with location markers. The dark map provides a sleek design that visually highlights locations flushed with color.
    p
      | Each geolocation that has at least one meeting within the time and location constraints provided is mapped to an individual marker on the map.
      | Our map's default view is centered around our current location (defaulted to <a class='underline' href='https://goo.gl/maps/wzBi5Feet6o'>The New School University Center</a>), with a zoom level representative of the distance constraint provided.
.project-image
  img(src=require(`../images/${utils.slugify(project.eyebrow)}/${project.id}/visualization/visualization2.png`))
.project-content
  p Location markers are colored in a gradient based on distance from the current location with darker colors representing closer meetings. Current location is shown in a constrasting&nbsp;red.
.project-image
  img(src=require(`../images/${utils.slugify(project.eyebrow)}/${project.id}/visualization/visualization3.png`))
.project-content
  p Hovering on a specific meeting geolocation changes our mouse to a pointer, prompting a click on that location. Information about the location(s), meeting(s), and schedule(s) at each meeting are then mapped to a pop-out which is accessible after that click, which will highlight the selected map marker and bring up a pop-out side pane that provides (in order of hierarchical presentation):
  ul
    li Location name, address, and address details
    li Meeting name, meeting type
    li Meeting schedule within timeframe provided
    li Additional meeting details, topics of interest, and accessibility concerns <i>(if present)</i>
.project-image
  img(src=require(`../images/${utils.slugify(project.eyebrow)}/${project.id}/visualization/visualization4.png`))
.project-content
  p The top-left menu provides users the opportunity to adjust the time and distance parameters and see the map update accordingly — these values are defaulted to <strong>48 hours</strong> from now and <strong>2 miles</strong> from The New School. Users can enter values up to 72 hours and 10 miles — values outside this range prompt a pop-up error with pointed guidance.

+next_project(projects.find(d => d.id === 'diary-of-envy'))